swagger: "2.0"
info:
  description: "The objective of this project is to enable the customers of the organisation to manage their profile."
  version: "1.0.0"
  title: "Profile Services"
  contact:
    email: "theonlyleo@hotmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/profile"
tags:
- name: "profile"
  description: "Customer profile definition"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "profile"
      summary: "Add a new user profile"
      description: ""
      operationId: "addUserProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Profile object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        201:
          description: "successful operation"
          schema:
           $ref: "#/definitions/UserResponse"
        400:
          description: "Invalid input"
        500:
          description: "Internal server error"
  /user/{userId}:
    put:
      tags:
      - "profile"
      summary: "Update an existing user profile"
      description: ""
      operationId: "updateUserProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Profile object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        400:
          description: "Invalid input"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "profile"
      summary: "Deletes a user profile"
      description: ""
      operationId: "deleteUserProfile"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"

securityDefinitions:
  basicAuth:
    type: basic
# To apply Basic auth to the whole API:
security:
  - basicAuth: []

definitions:
  UserRequest:
    type: "object"
    properties:
      firstName:
        type: "string"
        minLength: 1
        example: "Leo"
        description: "User First Name"
      lastName:
        type: "string"
        minLength: 1
        example: "Coutinho"
        description: "User Last Name"
      dateOfBirth:
        type: "string"
        format: "date"
        example: "1970-12-20"
      homeAddress:
        $ref: "#/definitions/Address"
      businessAddress:
        $ref: "#/definitions/Address"
      emailAddress:
        type: "string"
        format: "email"
        example: "theonlyleo@hotmail.com"
    required:
      - firstName
      - lastName
      - dateOfBirth
      - emailAddress

  UserResponse:
    type: "object"
    properties:
      id:
        type: "string"
      firstName:
        type: "string"
        minLength: 1
        example: "Leo"
        description: "User First Name"
      lastName:
        type: "string"
        minLength: 1
        example: "Coutinho"
        description: "User Last Name"
      dateOfBirth:
        type: "string"
        format: "date"
        example: "1970-12-20"
      homeAddress:
        $ref: "#/definitions/Address"
      businessAddress:
        $ref: "#/definitions/Address"
      emailAddress:
        type: "string"
        format: "email"
        example: "theonlyleo@hotmail.com"
  Address:
     type: "object"
     properties:
       unitType:
         type: string
       unitNumber:
         type: string
       floorType:
         type: string
       floorNumber:
         type: string
       streetNumber:
         type: string
         minLength: 1
       streetName:
         type: string
         minLength: 1
       streetType:
         type: string
         minLength: 1
       suburb:
         type: string
         minLength: 1
       state:
         type: string
         minLength: 2
         maxLength: 3
       postcode:
         type: string
         pattern: "^(\\d{4})$"
     required:
      - streetNumber
      - streetName
      - streetType
      - suburb
      - state
      - postcode
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"